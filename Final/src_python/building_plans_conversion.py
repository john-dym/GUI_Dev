#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Apr 29, 2024 09:50:43 PM EDT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import gui_tools
_location = os.path.dirname(__file__)

import building_plans_conversion_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40'
_default_win_size = "800x800"
_building_image_path = "images/building.png"
_save_file_name = "measures.txt"

class frmBuildingPlansConversion:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        app_size_pos = gui_tools.windows_geometry(top, _default_win_size)

        top.geometry(app_size_pos)
        top.minsize(120, 1)
        top.maxsize(2052, 1261)
        top.resizable(1,  1)
        top.title("Building Plans Conversion 2")
        top.configure(background="#b0c4de")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.ValueInput = tk.StringVar()
        self.txtConversion = tk.StringVar()
        self.txtFileSave = tk.StringVar()
        self.SelectedButton = tk.IntVar(value=1)


        self.btnClearList = tk.Button(self.top)
        self.btnClearList.place(relx=0.025, rely=0.825, height=36, width=127)
        self.btnClearList.configure(activebackground="#d9d9d9")
        self.btnClearList.configure(activeforeground="black")
        self.btnClearList.configure(background="#f2f2f2")
        self.btnClearList.configure(disabledforeground="#a3a3a3")
        self.btnClearList.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.btnClearList.configure(foreground="#000000")
        self.btnClearList.configure(highlightbackground="#d9d9d9")
        self.btnClearList.configure(highlightcolor="#000000")
        self.btnClearList.configure(relief="ridge")
        self.btnClearList.configure(text='''Clear List''')
        self.btnClearList.configure(command=self.b_clear_list)

        self.btnSaveToFile = tk.Button(self.top)
        self.btnSaveToFile.place(relx=0.2, rely=0.825, height=36, width=127)
        self.btnSaveToFile.configure(activebackground="#d9d9d9")
        self.btnSaveToFile.configure(activeforeground="black")
        self.btnSaveToFile.configure(background="#f2f2f2")
        self.btnSaveToFile.configure(disabledforeground="#a3a3a3")
        self.btnSaveToFile.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.btnSaveToFile.configure(foreground="#000000")
        self.btnSaveToFile.configure(highlightbackground="#d9d9d9")
        self.btnSaveToFile.configure(highlightcolor="#000000")
        self.btnSaveToFile.configure(relief="ridge")
        self.btnSaveToFile.configure(text='''Save to File''')
        self.btnSaveToFile.configure(command=self.b_safe_to_file)

        self.btnClearResults = tk.Button(self.top)
        self.btnClearResults.place(relx=0.4, rely=0.725, height=36, width=177)
        self.btnClearResults.configure(activebackground="#d9d9d9")
        self.btnClearResults.configure(activeforeground="black")
        self.btnClearResults.configure(background="#f2f2f2")
        self.btnClearResults.configure(disabledforeground="#a3a3a3")
        self.btnClearResults.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.btnClearResults.configure(foreground="#000000")
        self.btnClearResults.configure(highlightbackground="#d9d9d9")
        self.btnClearResults.configure(highlightcolor="#000000")
        self.btnClearResults.configure(relief="ridge")
        self.btnClearResults.configure(text='''Clear Results''')
        self.btnClearResults.configure(command=self.b_clear_results)

        self.btnSaveResults = tk.Button(self.top)
        self.btnSaveResults.place(relx=0.4, rely=0.638, height=36, width=177)
        self.btnSaveResults.configure(activebackground="#d9d9d9")
        self.btnSaveResults.configure(activeforeground="black")
        self.btnSaveResults.configure(background="#f2f2f2")
        self.btnSaveResults.configure(disabledforeground="#a3a3a3")
        self.btnSaveResults.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.btnSaveResults.configure(foreground="#000000")
        self.btnSaveResults.configure(highlightbackground="#d9d9d9")
        self.btnSaveResults.configure(highlightcolor="#000000")
        self.btnSaveResults.configure(relief="ridge")
        self.btnSaveResults.configure(text='''Save Results''')
        self.btnSaveResults.configure(command=self.b_save_results)

        self.btnConvert = tk.Button(self.top)
        self.btnConvert.place(relx=0.4, rely=0.475, height=36, width=177)
        self.btnConvert.configure(activebackground="#d9d9d9")
        self.btnConvert.configure(activeforeground="black")
        self.btnConvert.configure(background="#f2f2f2")
        self.btnConvert.configure(disabledforeground="#a3a3a3")
        self.btnConvert.configure(font="-family {Segoe UI} -size 15 -weight bold")
        self.btnConvert.configure(foreground="#000000")
        self.btnConvert.configure(highlightbackground="#d9d9d9")
        self.btnConvert.configure(highlightcolor="#000000")
        self.btnConvert.configure(relief="ridge")
        self.btnConvert.configure(text='''Convert''')
        self.btnConvert.configure(command=self.b_convert)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.HeaderFrame = tk.Frame(self.top)
        self.HeaderFrame.place(relx=-0.013, rely=0.013, relheight=0.345
                , relwidth=1.0)
        self.HeaderFrame.configure(relief='flat')
        self.HeaderFrame.configure(borderwidth="2")
        self.HeaderFrame.configure(background="#b0c4de")
        self.HeaderFrame.configure(highlightbackground="#d9d9d9")
        self.HeaderFrame.configure(highlightcolor="#000000")

        self.lblTitle = tk.Label(self.HeaderFrame)
        self.lblTitle.place(relx=0.388, rely=0.036, height=82, width=424)
        self.lblTitle.configure(activebackground="#d9d9d9")
        self.lblTitle.configure(activeforeground="black")
        self.lblTitle.configure(anchor='w')
        self.lblTitle.configure(background="#b0c4de")
        self.lblTitle.configure(compound='left')
        self.lblTitle.configure(disabledforeground="#a3a3a3")
        self.lblTitle.configure(font="-family {Segoe UI} -size 24 -weight bold")
        self.lblTitle.configure(foreground="#000000")
        self.lblTitle.configure(highlightbackground="#d9d9d9")
        self.lblTitle.configure(highlightcolor="#000000")
        self.lblTitle.configure(text='''Converter App 2''')

        self.lblInstructions = tk.Label(self.HeaderFrame)
        self.lblInstructions.place(relx=0.4, rely=0.391, height=82, width=236)
        self.lblInstructions.configure(activebackground="#d9d9d9")
        self.lblInstructions.configure(activeforeground="black")
        self.lblInstructions.configure(anchor='nw')
        self.lblInstructions.configure(background="#b0c4de")
        self.lblInstructions.configure(compound='left')
        self.lblInstructions.configure(disabledforeground="#a3a3a3")
        self.lblInstructions.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.lblInstructions.configure(foreground="#000000")
        self.lblInstructions.configure(highlightbackground="#d9d9d9")
        self.lblInstructions.configure(highlightcolor="#000000")
        self.lblInstructions.configure(text='''Enter a value and \nchoose conversion''')

        self.EntryValue = tk.Entry(self.HeaderFrame)
        self.EntryValue.place(relx=0.775, rely=0.471, height=50, relwidth=0.168)
        self.EntryValue.configure(background="#0000ff")
        self.EntryValue.configure(disabledforeground="#a3a3a3")
        self.EntryValue.configure(font="-family {Courier New} -size 16 -weight bold")
        self.EntryValue.configure(foreground="#ffffff")
        self.EntryValue.configure(highlightbackground="#d9d9d9")
        self.EntryValue.configure(highlightcolor="#000000")
        self.EntryValue.configure(insertbackground="#000000")
        self.EntryValue.configure(selectbackground="#d9d9d9")
        self.EntryValue.configure(selectforeground="black")
        self.EntryValue.configure(textvariable=self.ValueInput)
        self.EntryValue.bind("<Return>", lambda e: self.b_convert())

        self.lblPic = tk.Label(self.HeaderFrame)
        self.lblPic.place(relx=0.038, rely=0.0, height=205, width=264)
        self.lblPic.configure(activebackground="#d9d9d9")
        self.lblPic.configure(activeforeground="black")
        self.lblPic.configure(background="#d9d9d9")
        self.lblPic.configure(compound='left')
        self.lblPic.configure(disabledforeground="#a3a3a3")
        self.lblPic.configure(font="-family {Segoe UI} -size 9")
        self.lblPic.configure(foreground="#000000")
        self.lblPic.configure(highlightbackground="#d9d9d9")
        self.lblPic.configure(highlightcolor="#000000")
        gui_tools.image_to_label(_building_image_path, self.lblPic, (264,205))

        self.lblFrameSelection = tk.LabelFrame(self.top)
        self.lblFrameSelection.place(relx=0.388, rely=0.288, relheight=0.165
                , relwidth=0.565)
        self.lblFrameSelection.configure(relief='groove')
        self.lblFrameSelection.configure(font="-family {Segoe UI} -size 18 -weight bold")
        self.lblFrameSelection.configure(foreground="#ffffff")
        self.lblFrameSelection.configure(text='''Convert Measurement''')
        self.lblFrameSelection.configure(background="#0000ff")
        self.lblFrameSelection.configure(highlightbackground="#d9d9d9")
        self.lblFrameSelection.configure(highlightcolor="#000000")

        self.RdButtonMetersToInch = tk.Radiobutton(self.lblFrameSelection)
        self.RdButtonMetersToInch.place(relx=0.044, rely=0.689, relheight=0.159
                                        , relwidth=0.759, bordermode='ignore')
        self.RdButtonMetersToInch.configure(activebackground="#d9d9d9")
        self.RdButtonMetersToInch.configure(activeforeground="black")
        self.RdButtonMetersToInch.configure(anchor='w')
        self.RdButtonMetersToInch.configure(background="#0000ff")
        self.RdButtonMetersToInch.configure(compound='left')
        self.RdButtonMetersToInch.configure(disabledforeground="#a3a3a3")
        self.RdButtonMetersToInch.configure(font="-family {Segoe UI} -size 18")
        self.RdButtonMetersToInch.configure(foreground="#ffffff")
        self.RdButtonMetersToInch.configure(highlightbackground="#d9d9d9")
        self.RdButtonMetersToInch.configure(highlightcolor="#000000")
        self.RdButtonMetersToInch.configure(justify='left')
        self.RdButtonMetersToInch.configure(text='''Meters to Inches''')
        self.RdButtonMetersToInch.configure(variable=self.SelectedButton)
        self.RdButtonMetersToInch.configure(value=2)
        self.RdButtonMetersToInch.configure(selectcolor="black")

        self.RdButtonInToMeters = tk.Radiobutton(self.lblFrameSelection)
        self.RdButtonInToMeters.place(relx=0.044, rely=0.311, relheight=0.212
                                      , relwidth=0.759, bordermode='ignore')
        self.RdButtonInToMeters.configure(activebackground="#d9d9d9")
        self.RdButtonInToMeters.configure(activeforeground="black")
        self.RdButtonInToMeters.configure(anchor='w')
        self.RdButtonInToMeters.configure(background="#0000ff")
        self.RdButtonInToMeters.configure(compound='left')
        self.RdButtonInToMeters.configure(disabledforeground="#a3a3a3")
        self.RdButtonInToMeters.configure(font="-family {Segoe UI} -size 18")
        self.RdButtonInToMeters.configure(foreground="#ffffff")
        self.RdButtonInToMeters.configure(highlightbackground="#d9d9d9")
        self.RdButtonInToMeters.configure(highlightcolor="#000000")
        self.RdButtonInToMeters.configure(justify='left')
        self.RdButtonInToMeters.configure(text='''Inches to Meters''')
        self.RdButtonInToMeters.configure(variable=self.SelectedButton)
        self.RdButtonInToMeters.configure(value=1)
        self.RdButtonInToMeters.configure(selectcolor='black')

        self.lstBoxResults = tk.Listbox(self.top)
        self.lstBoxResults.place(relx=0.025, rely=0.375, relheight=0.415
                , relwidth=0.33)
        self.lstBoxResults.configure(background="white")
        self.lstBoxResults.configure(disabledforeground="#a3a3a3")
        self.lstBoxResults.configure(font="-family {Courier New} -size 14")
        self.lstBoxResults.configure(foreground="#000000")
        self.lstBoxResults.configure(highlightbackground="#d9d9d9")
        self.lstBoxResults.configure(highlightcolor="#000000")
        self.lstBoxResults.configure(selectbackground="#d9d9d9")
        self.lstBoxResults.configure(selectforeground="black")

        self.lblOutput = tk.Label(self.top)
        self.lblOutput.place(relx=0.388, rely=0.525, height=84, width=456)
        self.lblOutput.configure(activebackground="#d9d9d9")
        self.lblOutput.configure(activeforeground="black")
        self.lblOutput.configure(anchor='w')
        self.lblOutput.configure(background="#b0c4de")
        self.lblOutput.configure(compound='left')
        self.lblOutput.configure(disabledforeground="#a3a3a3")
        self.lblOutput.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.lblOutput.configure(foreground="#000000")
        self.lblOutput.configure(highlightbackground="#d9d9d9")
        self.lblOutput.configure(highlightcolor="#000000")
        self.lblOutput.configure(textvariable=self.txtConversion)

        self.lblSaveFileOutput = tk.Label(self.top)
        self.lblSaveFileOutput.place(relx=0.4, rely=0.788, height=84, width=456)
        self.lblSaveFileOutput.configure(activebackground="#d9d9d9")
        self.lblSaveFileOutput.configure(activeforeground="black")
        self.lblSaveFileOutput.configure(anchor='w')
        self.lblSaveFileOutput.configure(background="#b0c4de")
        self.lblSaveFileOutput.configure(compound='left')
        self.lblSaveFileOutput.configure(disabledforeground="#a3a3a3")
        self.lblSaveFileOutput.configure(font="-family {Segoe UI} -size 16 -weight bold")
        self.lblSaveFileOutput.configure(foreground="#000000")
        self.lblSaveFileOutput.configure(highlightbackground="#d9d9d9")
        self.lblSaveFileOutput.configure(highlightcolor="#000000")
        self.lblSaveFileOutput.configure(textvariable=self.txtFileSave)

        self.EntryValue.focus_set()

    def b_clear_results(self):
        # Clears input and output
        self.ValueInput.set("")
        self.SelectedButton.set(1)
        self.txtConversion.set("")
        self.EntryValue.focus_set()


    def b_clear_list(self):
        self.lstBoxResults.delete(0, tk.END)
        self.txtFileSave.set("")

    def b_convert(self):
        value = self.validate_input()

        if value:
            self.calculate_and_output(value)

    def b_save_results(self):
        if self.txtConversion.get() != "":
            self.lstBoxResults.insert('end', self.txtConversion.get())

    def b_safe_to_file(self):
        with open(_save_file_name, "wt") as f:
            for entry in self.lstBoxResults.get(0, tk.END):
                f.write(entry + "\n")

        self.txtFileSave.set("Saved " + str(self.lstBoxResults.size()) + " entries to file " + _save_file_name)

    def validate_input(self):
        input = self.ValueInput.get()
        input_match = gui_tools.validate_float_input(input)

        if input_match:
            # input is a float
            float_value = float(self.ValueInput.get())

            if float_value >= 0:
                return float_value
            else:
                self.negative_number_error()
                return None
        else:
            self.invalid_number_input_error()
            return None

    def convert_input(self):
        if gui_tools.validate_float_input(self.ValueInput.get()):
            return float(self.ValueInput.get())

    def calculate_and_output(self, float_value):
        entry_value = self.EntryValue.get()
        display = ""
        converted_value = 0.0
        if self.SelectedButton.get() == 1:  # Inches to Meters
            converted_value = self.inch_to_meter(float_value)
            display = f"{entry_value} inches is {converted_value:.2f} meters"
        elif self.SelectedButton.get() == 2:  # Meters to inches
            converted_value = self.meter_to_inch(float_value)
            display = f"{entry_value} meters is {converted_value:.2f} inches"

        self.txtConversion.set(display)

    def invalid_number_input_error(self):
        title = "Invalid input Error"
        message = "Please enter a valid number."
        gui_tools.error_message(title, message)
        self.b_clear_results()

    def negative_number_error(self):
        title = "Negative Number Error"
        message = "Please enter a positive number."
        gui_tools.error_message(title, message)
        self.b_clear_results()

    def inch_to_meter(self, inch_value):
        return inch_value * 0.0254

    def meter_to_inch(self, meter_value):
        return meter_value * 39.3701

def start_up():
    building_plans_conversion_support.main()

if __name__ == '__main__':
    building_plans_conversion_support.main()




