#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 05, 2024 05:35:49 PM EST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import messagebox
import os.path
from PIL import ImageTk, Image
from re import fullmatch

_location = os.path.dirname(__file__)

import comic_con_registration_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40'
_image_folder = "images/"
_integer_re = "[0-9]*"

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x700+912+314")
        top.minsize(120, 1)
        top.maxsize(4100, 1133)
        top.resizable(1,  1)
        top.title("Comic Convention Registration")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top = top
        self.GroupSizeInput = tk.StringVar()
        self.CostOutput = tk.StringVar()
        self.SelectedBadge = tk.IntVar(value=1)
        self.BadgeCosts = {1:380.00, 2:275.00, 3:209.00}

        self.lblGroupSize = tk.Label(self.top)
        self.lblGroupSize.place(relx=0.25, rely=0.371, height=81, width=171)
        self.lblGroupSize.configure(activebackground="#d9d9d9")
        self.lblGroupSize.configure(activeforeground="black")
        self.lblGroupSize.configure(anchor='w')
        self.lblGroupSize.configure(background="#d9d9d9")
        self.lblGroupSize.configure(compound='left')
        self.lblGroupSize.configure(disabledforeground="#a3a3a3")
        self.lblGroupSize.configure(font="-family {Comic Sans MS} -size 20 -weight bold")
        self.lblGroupSize.configure(foreground="#e4562a")
        self.lblGroupSize.configure(highlightbackground="#d9d9d9")
        self.lblGroupSize.configure(highlightcolor="#000000")
        self.lblGroupSize.configure(text='''Group Size:''')

        self.lblCost = tk.Label(self.top)
        self.lblCost.place(relx=0.133, rely=0.8, height=41, width=274)
        self.lblCost.configure(activebackground="#d9d9d9")
        self.lblCost.configure(activeforeground="black")
        self.lblCost.configure(anchor='w')
        self.lblCost.configure(background="#d9d9d9")
        self.lblCost.configure(compound='left')
        self.lblCost.configure(disabledforeground="#a3a3a3")
        self.lblCost.configure(font="-family {Comic Sans MS} -size 20 -weight bold")
        self.lblCost.configure(foreground="#e4562a")
        self.lblCost.configure(highlightbackground="#d9d9d9")
        self.lblCost.configure(highlightcolor="#000000")
        self.lblCost.configure(text='''Registration Cost:''')

        self.lblTitle = tk.Label(self.top)
        self.lblTitle.place(relx=0.0, rely=0.286, height=82, width=604)
        self.lblTitle.configure(activebackground="#d9d9d9")
        self.lblTitle.configure(activeforeground="black")
        self.lblTitle.configure(background="#d9d9d9")
        self.lblTitle.configure(compound='left')
        self.lblTitle.configure(disabledforeground="#a3a3a3")
        self.lblTitle.configure(font="-family {Comic Sans MS} -size 28 -weight bold")
        self.lblTitle.configure(foreground="#e4562a")
        self.lblTitle.configure(highlightbackground="#d9d9d9")
        self.lblTitle.configure(highlightcolor="#000000")
        self.lblTitle.configure(text='''Comic Convention Registration''')

        self.frameSelection = tk.LabelFrame(self.top)
        self.frameSelection.place(relx=0.1, rely=0.5, relheight=0.266, relwidth=0.8)
        self.frameSelection.configure(relief='groove')
        self.frameSelection.configure(font="-family {Comic Sans MS} -size 16 -weight bold")
        self.frameSelection.configure(foreground="#e4562a")
        self.frameSelection.configure(text='''Select Badge Type:''')
        self.frameSelection.configure(background="#6bcdea")
        self.frameSelection.configure(highlightbackground="#d9d9d9")
        self.frameSelection.configure(highlightcolor="#000000")

        self.Radiobutton1 = tk.Radiobutton(self.frameSelection)
        self.Radiobutton1.place(relx=0.083, rely=0.177, relheight=0.242
                , relwidth=0.875, bordermode='ignore')
        self.Radiobutton1.configure(activebackground="#6bcdea")
        self.Radiobutton1.configure(activeforeground="black")
        self.Radiobutton1.configure(anchor='w')
        self.Radiobutton1.configure(background="#6bcdea")
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(font="-family {Comic Sans MS} -size 16 -weight bold")
        self.Radiobutton1.configure(foreground="#e4562a")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="#000000")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Convention + Superhero Experience''')
        self.Radiobutton1.configure(variable=self.SelectedBadge)
        self.Radiobutton1.configure(value=1)

        self.Radiobutton2 = tk.Radiobutton(self.frameSelection)
        self.Radiobutton2.place(relx=0.083, rely=0.43, relheight=0.242
                , relwidth=0.875, bordermode='ignore')
        self.Radiobutton2.configure(activebackground="#d9d9d9")
        self.Radiobutton2.configure(activeforeground="black")
        self.Radiobutton2.configure(anchor='w')
        self.Radiobutton2.configure(background="#6bcdea")
        self.Radiobutton2.configure(compound='left')
        self.Radiobutton2.configure(disabledforeground="#a3a3a3")
        self.Radiobutton2.configure(font="-family {Comic Sans MS} -size 16 -weight bold")
        self.Radiobutton2.configure(foreground="#e4562a")
        self.Radiobutton2.configure(highlightbackground="#d9d9d9")
        self.Radiobutton2.configure(highlightcolor="#000000")
        self.Radiobutton2.configure(justify='left')
        self.Radiobutton2.configure(text='''Convention + Autographs''')
        self.Radiobutton2.configure(variable=self.SelectedBadge)
        self.Radiobutton2.configure(value=2)

        self.Radiobutton3 = tk.Radiobutton(self.frameSelection)
        self.Radiobutton3.place(relx=0.083, rely=0.683, relheight=0.242
                , relwidth=0.875, bordermode='ignore')
        self.Radiobutton3.configure(activebackground="#d9d9d9")
        self.Radiobutton3.configure(activeforeground="black")
        self.Radiobutton3.configure(anchor='w')
        self.Radiobutton3.configure(background="#6bcdea")
        self.Radiobutton3.configure(compound='left')
        self.Radiobutton3.configure(disabledforeground="#a3a3a3")
        self.Radiobutton3.configure(font="-family {Comic Sans MS} -size 16 -weight bold")
        self.Radiobutton3.configure(foreground="#e4562a")
        self.Radiobutton3.configure(highlightbackground="#d9d9d9")
        self.Radiobutton3.configure(highlightcolor="#000000")
        self.Radiobutton3.configure(justify='left')
        self.Radiobutton3.configure(text='''Convention''')
        self.Radiobutton3.configure(variable=self.SelectedBadge)
        self.Radiobutton3.configure(value=3)

        self.btnCalculate = tk.Button(self.top)
        self.btnCalculate.place(relx=0.15, rely=0.914, height=46, width=167)
        self.btnCalculate.configure(activebackground="#d9d9d9")
        self.btnCalculate.configure(activeforeground="black")
        self.btnCalculate.configure(background="#6bcdea")
        self.btnCalculate.configure(disabledforeground="#a3a3a3")
        self.btnCalculate.configure(font="-family {Comic Sans MS} -size 20 -weight bold")
        self.btnCalculate.configure(foreground="#000000")
        self.btnCalculate.configure(highlightbackground="#d9d9d9")
        self.btnCalculate.configure(highlightcolor="#000000")
        self.btnCalculate.configure(text='''Calculate''')
        self.btnCalculate.configure(command=self.calculate)

        self.btnClear = tk.Button(self.top)
        self.btnClear.place(relx=0.583, rely=0.914, height=46, width=167)
        self.btnClear.configure(activebackground="#d9d9d9")
        self.btnClear.configure(activeforeground="black")
        self.btnClear.configure(background="#6bcdea")
        self.btnClear.configure(command=self.clear)
        self.btnClear.configure(disabledforeground="#a3a3a3")
        self.btnClear.configure(font="-family {Comic Sans MS} -size 20 -weight bold")
        self.btnClear.configure(foreground="#000000")
        self.btnClear.configure(highlightbackground="#d9d9d9")
        self.btnClear.configure(highlightcolor="#000000")
        self.btnClear.configure(relief="ridge")
        self.btnClear.configure(text='''Clear''')

        self.frameHeaderPic = tk.Frame(self.top)
        self.frameHeaderPic.place(relx=0.0, rely=0.0, relheight=0.294
                                  , relwidth=1.008)
        self.frameHeaderPic.configure(relief='flat')
        self.frameHeaderPic.configure(borderwidth="2")
        self.frameHeaderPic.configure(background="#d9d9d9")
        self.frameHeaderPic.configure(highlightbackground="#d9d9d9")
        self.frameHeaderPic.configure(highlightcolor="#000000")
        self.picComic = tk.Label(self.frameHeaderPic)
        self.picComic.place(relx=0, rely=0, relheight=1.0, relwidth=1)
        with Image.open(_image_folder + "comic.jpg") as comic_image:
            HeaderFrame_size = (605, 206)
            photo = ImageTk.PhotoImage(comic_image.resize(HeaderFrame_size))
            self.picComic.configure(image=photo)
            self.picComic.image = photo

        self.EntryGroupSize = tk.Entry(self.top)
        self.EntryGroupSize.place(relx=0.617, rely=0.4, height=50, relwidth=0.14)

        self.EntryGroupSize.configure(background="white")
        self.EntryGroupSize.configure(disabledforeground="#a3a3a3")
        self.EntryGroupSize.configure(font="-family {Comic Sans MS} -size 18 -weight bold")
        self.EntryGroupSize.configure(foreground="#e4562a")
        self.EntryGroupSize.configure(highlightbackground="#d9d9d9")
        self.EntryGroupSize.configure(highlightcolor="#000000")
        self.EntryGroupSize.configure(insertbackground="#000000")
        self.EntryGroupSize.configure(selectbackground="#d9d9d9")
        self.EntryGroupSize.configure(selectforeground="black")
        self.EntryGroupSize.configure(textvariable=self.GroupSizeInput)
        self.EntryGroupSize.focus_set()

        self.lblCostOutput = tk.Label(self.top)
        self.lblCostOutput.place(relx=0.583, rely=0.8, height=41, width=194)
        self.lblCostOutput.configure(activebackground="#d9d9d9")
        self.lblCostOutput.configure(activeforeground="black")
        self.lblCostOutput.configure(anchor='w')
        self.lblCostOutput.configure(background="#d9d9d9")
        self.lblCostOutput.configure(compound='left')
        self.lblCostOutput.configure(disabledforeground="#a3a3a3")
        self.lblCostOutput.configure(font="-family {Comic Sans MS} -size 20 -weight bold")
        self.lblCostOutput.configure(foreground="#e4562a")
        self.lblCostOutput.configure(highlightbackground="#d9d9d9")
        self.lblCostOutput.configure(highlightcolor="#000000")
        self.lblCostOutput.configure(textvariable=self.CostOutput)
        self.CostOutput.set('''''')

    def clear(self):
        #Clears the user input and outputs
        self.SelectedBadge.set(1)
        self.CostOutput.set("")
        self.GroupSizeInput.set("")
        self.EntryGroupSize.focus_set()

    def calculate(self):
        group_size = self.ValidateGroupSize()

        if group_size == 0: return #Exit because of failed input

        badge_price = self.BadgeCosts[self.SelectedBadge.get()]
        total_price = badge_price * group_size
        cost_str = f'${total_price:.2f}'
        self.CostOutput.set(cost_str)

    def ValidateGroupSize(self):
        MAX_GROUP_SIZE = 20
        re_check = fullmatch(_integer_re, self.EntryGroupSize.get())
        if re_check:
            group_size = int(re_check.string)
            if group_size >= 1 and group_size <= MAX_GROUP_SIZE:
                return group_size

        #If input is incorrect
        self.InvalidInput()
        return 0

    def InvalidInput(self):
        messagebox.showerror("Error", "Group size must be a whole number between 1 and 20")
        self.clear()


def start_up():
    comic_con_registration_support.main()

if __name__ == '__main__':
    comic_con_registration_support.main()




